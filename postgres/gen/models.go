// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccrualStatus string

const (
	AccrualStatusNEW        AccrualStatus = "NEW"
	AccrualStatusPROCESSING AccrualStatus = "PROCESSING"
	AccrualStatusINVALID    AccrualStatus = "INVALID"
	AccrualStatusPROCESSED  AccrualStatus = "PROCESSED"
)

func (e *AccrualStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccrualStatus(s)
	case string:
		*e = AccrualStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccrualStatus: %T", src)
	}
	return nil
}

type NullAccrualStatus struct {
	AccrualStatus AccrualStatus
	Valid         bool // Valid is true if AccrualStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccrualStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccrualStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccrualStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccrualStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccrualStatus), nil
}

type Order struct {
	ID            string
	UserLogin     string
	UploadedAt    pgtype.Timestamp
	AccrualStatus AccrualStatus
	AccrualPoints *float64
}

type User struct {
	Login          string
	Password       string
	AccrualBalance float64
}

type Withdrawal struct {
	ID          int32
	OrderNumber string
	UserLogin   string
	Sum         float64
	ProcessedAt pgtype.Timestamp
}
